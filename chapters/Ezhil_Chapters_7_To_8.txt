7

இதுவரை ‘எழில்’ மொழியைப் பயன்படுத்திப் பல்வேறு உபயோகமான நிரல்களை எழுதினோம், அவற்றைப் பயன்படுத்திப் புரிந்துகொண்டோம்.

அடுத்தகட்டமாக, பொதுப் பயன்பாட்டுக்குரிய சில விசேஷ நிரல்களை எழுதப் பழகுவோம். இவற்றை நீங்கள் ஒருமுறை எழுதிவிட்டால் போதும், பிறகு வேண்டியபோதெல்லாம் அழைத்துப் பயன்படுத்தலாம்.

உதாரணமாக, உங்கள் வீட்டில் ஊறுகாய் இருக்கிறது, அதை ஒருமுறை தயாரித்து வைத்துவிடுகிறீர்கள், பிறகு எப்போது அதைச் சாப்பிட விரும்பினாலும் ஜாடியைத் திறந்து எடுத்துப் போட்டுக்கொள்கிறோம், ஒவ்வொருமுறையும் ஊறுகாயைப் புதிதாகச் சமைக்கவேண்டியதில்லை.

அதே சமையலறையிலிருந்து இன்னோர் உதாரணம், ஒருவர் ரசம் சமைக்கும்போது, ஒரு குறிப்பிட்ட செய்முறையைப் பின்பற்றுவார். அதன் நடுவே ‘ரசப்பொடியைப் போடவும்’ என்று இருக்கும்.

ரசப்பொடி என்பதை, அவர் இப்போது தயாரிப்பதில்லை, ஏற்கெனவே எப்போதோ தயாரித்துவைத்துவிட்டார், பின்னர் தேவைப்படும்போது சட்டென்று எடுத்துப் பயன்படுத்துகிறார், அதன்பிறகு, செய்முறையில் இருக்கும் மற்ற விஷயங்களைத் தொடர்ந்து செய்கிறார்.

அதுபோல, ஒரு நிரலின் நடுவே, சில விஷயங்கள் நாம் அடிக்கடி செய்கிறவையாக இருக்கும், அவற்றை ஒவ்வொருமுறையும் தனித்தனியே எழுதிக்கொண்டிருக்காமல், ஒருமுறை எழுதிவைத்துவிட்டு, தேவைப்படும்போது அழைத்துப் பயன்படுத்தலாம், பிறகு, நம்முடைய நிரலைத் தொடர்ந்து எழுதலாம்.

உதாரணமாக, இரண்டு எண்களில் எது பெரியது என்று கண்டுபிடிப்பதற்கான எளிய நிரல் ஒன்றை எழுதுவோம்:

*****************************
எண்1 = உள்ளீடு("ஓர் எண்ணைச் சொல்லுங்கள்: ")
எண்2 = உள்ளீடு("இன்னோர் எண்ணைச் சொல்லுங்கள்: ")

@(எண்1 > எண்2) ஆனால்
	பதிப்பி "நீங்கள் தந்தவற்றுள் பெரிய எண்: ", எண்1
இல்லை
	பதிப்பி "நீங்கள் தந்தவற்றுள் பெரிய எண்: ", எண்2
முடி
*****************************

மிக எளிய நிரல் இது. கணினிப் பயனாளரிடமிருந்து இரு எண்களைக் கேட்டு வாங்கி, அதில் எது பெரியதோ அதைமட்டும் திரையில் அச்சிடுகிறது.

இந்தப் ‘பெரிய எண்ணைக் கண்டுபிடித்தல்’ என்ற செயல், நம்முடைய பல கணக்குகளில் அடிக்கடி வரும், அப்போதெல்லாம் இந்த நிரலை மீண்டும் மீண்டும் எழுதிக்கொண்டிருக்காமல், ஒருமுறை எழுதிவிட்டுப் பின்னர் அதைப் பலமுறை பயன்படுத்தமுடியுமா என்று பார்ப்போம்.

இதற்கு நாம் ‘நிரல்பாகம்’ என்ற சிறப்புக் குறிச்சொல்லைப் பயன்படுத்தவேண்டும். ஆங்கிலத்தில் இதனை ‘Function' என்று அழைப்பார்கள்.

*****************************
நிரல்பாகம் பெரியது (எண்1, எண்2)

	@(எண்1 > எண்2) ஆனால்
		பின்கொடு எண்1
	இல்லை
		பின்கொடு எண்2
	முடி

முடி
*****************************

இங்கே நாம் என்ன செய்திருக்கிறோம்? படிப்படியாக அலசுவோம்:

	1. “பெரியது" என்ற பெயரில் ஒரு நிரல்பாகத்தைத் தொடங்கியிருக்கிறோம்
	2. இந்த நிரல்பாகத்தை அழைக்க விரும்புவோர் அதற்கு இரண்டு எண்களைத் தரவேண்டும், அவற்றை அடைப்புக் குறியினுள் எழுதியிருக்கிறோம்
	3. இவற்றுள் எண்1 பெரியது என்றால், நிரல்பாகத்தை அழைத்தோருக்கு அதையே விடையாகக் கொடுக்கிறோம், இல்லாவிட்டால் எண்2வை விடையாகத் தருகிறோம், இதற்குப் ‘பின்கொடு’ என்ற குறிச்சொல் பயன்படுகிறது. ஆங்கிலத்தில் இதனை ‘Return' என்பார்கள்.

இங்கே நாம் நிரல்பாகத்தைமட்டும்தான் எழுதியிருக்கிறோம். அதனை இன்னும் அழைக்கவில்லை, அதாவது, இந்த நிரலை நாம் இன்னும் பயன்படுத்தவில்லை. ரசப்பொடியை எடுத்துப் போட்டுச் சமைத்தால்தானே ரசம் தயாராகும்?

அதற்கான நிரல் வரி மிக எளிது:

*****************************
பதிப்பி பெரியது(10, 15)
பதிப்பி பெரியது(12, 8)
*****************************

அவ்வளவுதான், நமக்கு வேண்டிய இடங்களில் “பெரியது" என்ற சொல்லை எழுதி, அதற்கு வேண்டிய இரண்டு எண்களைக் கொடுத்தவுடன் விடை பளிச்சென்று திரும்பக் கிடைத்துவிடும். பிரமாதம், இல்லையா?

ஆனால், நிரல்பாகத்தின் உண்மையான பலன் இதுவல்ல, கொஞ்சம் சிக்கலான கணக்குகளில் அதைப் பயன்படுத்திப் பார்த்தால்தான் இதன் முழு பலமும் நமக்குத் தெரியவரும்.

முதலில், Factorial எனப்படும் தொடர்பெருக்கு எண்ணைக் கணக்கிடுவதற்கு ஒரு நிரல் எழுதுவோம்.

அதற்குமுன்னால், ஓர் எண்ணின் Factorialலை எப்படிக் கண்டுபிடிப்பது? உங்கள் கணக்குப் பாடத்தைச் சற்றே நினைவுபடுத்திப் பாருங்கள்:

	* உதாரணமாக, எண் 7 எடுத்துக்கொள்வோம், இதன் Factorial 7! என்று குறிக்கப்படும்
	* 7! = அதில் தொடங்கி ஒன்று வரையிலான அனைத்து எண்களின் பெருக்குத் தொகை, அதாவது, 7 * 6 * 5 * 4 * 3 * 2 * 1 = 5040
	
அவ்வளவுதான். எளிமையான கணக்கு!

ஆனால், உங்களிடம் யாராவது ’100! எவ்வளவு?’ என்று கேட்டுவிட்டால் என்ன செய்வீர்கள்? 100*99*98... என்று கணக்குப் போடுவதற்கு ரொம்ப நேரமாகுமே!

கவலை வேண்டாம், எழில் மொழியும், அதன் நிரல்பாகமும் உங்கள் துணைக்கு வரும். இதோ இப்படி:

*****************************
நிரல்பாகம் தொடர்பெருக்கு(அ)
	@(அ == 0) ஆனால்
		பின்கொடு 1
	இல்லை
		பின்கொடு அ*தொடர்பெருக்கு(அ-1)
	முடி
முடி

பதிப்பி தொடர்பெருக்கு(7)
பதிப்பி தொடர்பெருக்கு(100)
*****************************

இந்த நிரல் எப்படி இயங்குகிறது?

முதலில் தொடர்பெருக்கு(7) எனத் தொடங்குகிறோம், அங்கே அது 7 * தொடர்பெருக்கு(6) என மாறுகிறது, பின் 7 * 6 * தொடர்பெருக்கு(5) என மாறுகிறது... இப்படியே தொடர்ந்து 7 * 6 * 5 * 4 * 3 * 2 * 1 = 5040 என்று கண்டறிந்துவிடுகிறோம்!

இதேபோல், தொடர்பெருக்கு(100)ஐயும் அழைக்கலாம், ஆனால் அதன் விடை மிக மிகப் பெரியது, இந்தப் புத்தகத்தில் எழுதுவது சாத்தியமில்லை!

அடுத்து, இதேபோல் இரு எண்களுக்கு இடையே GCD அல்லது மீபொவ எனப்படுகிற மீப்பெரு பொது வகுத்தி கண்டுபிடிக்க ஒரு நிரல் எழுதுவோம்.

மறுபடியும், உங்கள் கணக்குப் பாடத்தைச் சற்றே நினைவுபடுத்திப் பாருங்கள், GCD என்றால் என்ன?

	* உதாரணமாக, எண்கள் 54, 42 ஆகியவற்றை எடுத்துக்கொள்வோம்
	* இதில் 54 என்பது 1, 2, 3, 6, 9, 18, 27 மற்றும் 54 ஆகியவற்றால் வகுபடும்
	* ஆனால் 42 என்பது 1, 2, 3, 4, 6, 8, 12, 24 ஆகியவற்றால் வகுபடும்
	* இந்த இரண்டு பட்டியலுக்கும் பொதுவான எண்கள் 1, 2, 3, 6 ஆகியவை
	* இவற்றில் பெரியது 6
	* ஆகவே, 54, 42ன் GCD 6

எளிமையான கணக்குதான். ஆனால் இதைக் கையால் செய்வது சிரமம். திரும்பத் திரும்பப் பலமுறை வகுத்துப் பார்த்துக்கொண்டே இருக்கவேண்டும்.

அதற்குதான் நிரல்பாகம் பயன்படுகிறது, இதோ இப்படி:

*****************************
நிரல்பாகம் மீபொம(அ, ஆ)
	பெரிது = max(அ, ஆ)
	சிறிது = min(அ, ஆ)
	@(சிறிது == 0) ஆனால்
		பின்கொடு பெரிது
	இல்லை
		பின்கொடு மீபொம(பெரிது - சிறிது, சிறிது)
	முடி
முடி

பதிப்பி "54, 42 இடையிலான மீபொம = ", மீபொம(54, 42)
*****************************

இந்த நிரல் எப்படி இயங்குகிறது என நாம் படிப்படியாகப் பார்க்கவேண்டும்:

முதன்முறை:

	மீபொம(54, 42)
	பெரிது = அவற்றில் பெரிய எண் = 54
	சிறிது = அவற்றில் சிறிய எண் = 42
	சிறிது == 0 இல்லை
	ஆகவே, அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், இப்படி: மீபொம(பெரிது - சிறிது, சிறிது), அதாவது, மீபொம(54-42, 42), மீபொம(12, 42)
	
	இப்போது,
	பெரிது = 42
	சிறிது = 12
	சிறிது == 0 இல்லை
	அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், மீபொம(42-12, 12), அதாவது மீபொம(30, 12)

	இப்போது,
	பெரிது = 30
	சிறிது = 12
	சிறிது == 0 இல்லை
	அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், மீபொம(30-12, 12) அதாவது, மீபொம(18, 12)
	
	இப்போது,
	பெரிது = 18
	சிறிது = 12
	சிறிது == 0 இல்லை
	அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், மீபொம(18-12, 12) அதாவது, மீபொம(6, 12)
	
	இப்போது,
	பெரிது = 6
	சிறிது = 12
	சிறிது == 0 இல்லை
	அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், மீபொம(12-6, 6) அதாவது மீபொம(6,6)
	
	இப்போது,
	பெரிது = 6
	சிறிது = 6
	சிறிது ==0 இல்லை
	அதே மீபொம நிரல்பாகம் மீண்டும் அழைக்கப்படும், மீபொம(6-6, 0), அதாவது மீபொம(6, 0)
	
	இப்போது,
	பெரிது = 6
	சிறிது = 0
	சிறிது == 0
	ஆகவே, GCD விடை = பெரிது = 6

அவ்வளவுதான். நாம் கையால் போட்ட அதே கணக்கைக் கணினியால் போட்டுவிட்டோம். நிரல்பாகத்தின் உண்மையான பலன் இப்போது தெரிந்திருக்கும். ஒருமுறை இருமுறை அல்ல, நூறு முறை, ஆயிரம் முறைகூட இதனை நீங்கள் அழைத்துப் பயன்படுத்தலாம்!

இப்போது, உங்களுக்கு ஒரு பயிற்சி:

	* ஒன்று முதல் ஐம்பது வரை உள்ள எண்களில் எவையெல்லாம் பகா எண்கள் (Prime Numbers) என்று கண்டறிந்து, திரையில் அச்சிடுங்கள்
	* பின்னர் அந்த எண்களின் கூட்டுத்தொகையையும் அச்சிடவேண்டும்
	* இந்தக் கூட்டுத்தொகை பகு எண்ணா, பகா எண்ணா என்று கண்டறியவேண்டும்
	* உங்களுக்கு உதவியாக ஒரு குறிப்பு, ஓர் எண் பகா எண்ணா என்று கண்டறிய நீங்கள் floor, fmod என்ற கணிதச் செயல்பாடுகளைப் பயன்படுத்தவேண்டியிருக்கும், இவைபற்றித் தேடிப் படித்துத் தெரிந்துகொள்ளுங்கள், அல்லது, உங்களுடைய புதிய வழிமுறையைக் கண்டறியுங்கள்

விடை:

*****************************
நிரல்பாகம் பகாஎண்ணா(அ)

	ஆ = 1
	இ = floor(அ/2)
	@(இ >= 2) வரை
		@(fmod(அ, இ) == 0) ஆனால்
			ஆ = 0
			நிறுத்து
		முடி
		இ = இ + 1	
	முடி
	பின்கொடு ஆ
முடி

எல்லை = 50
எண் = 1
கூட்டுத்தொகை = 0

@(எண் <= எல்லை) வரை
	
	விடை = பகாஎண்ணா(எண்)
	@(விடை) ஆனால்
		பதிப்பி எண்
		கூட்டுத்தொகை = கூட்டுத்தொகை + எண்
	முடி
	எண் = எண் + 1

முடி

பதிப்பி "இதுவரை நாம் பார்த்த பகா எண்களின் கூட்டுத்தொகை: ", கூட்டுத்தொகை

கூட்டுத்தொகைவிடை = பகாஎண்ணா(கூட்டுத்தொகை)

@(கூட்டுத்தொகைவிடை) ஆனால்
	பதிப்பி "இந்தக் கூட்டுத்தொகையும் ஒரு பகா எண்தான்"
இல்லை
	பதிப்பி "இந்தக் கூட்டுத்தொகை பகா எண் அல்ல"
முடி
*****************************
	
நிரல்பாகம் கணக்கில்மட்டும்தான் உதவுமா? மற்ற இடங்களில் அதனை உபயோகப்படுத்தமுடியாதா?

நன்றாக உபயோகப்படுத்தலாம். உதாரணமாக, படம் வரைவதற்கு!

ஏற்கெனவே ‘எழில்’ பயன்படுத்திப் பல எளிய படங்களை வரைந்திருக்கிறோம், இப்போது, கொஞ்சம் சிக்கலான ஒரு படத்தை வரைவோம், நிரல்பாகம் உதவியுடன்!

இங்கே நாம் வரையப்போவது, ஒரு செடியின் படம் (ஆங்கிலத்தில் Fern என்பார்கள்), இந்தச் செடியில் உள்ள வெவ்வேறு அளவிலான இலைகளையெல்லாம் ஒவ்வொன்றாக வரைந்துகொண்டிருக்காமல், நிரல்பாகத்தின்மூலம் சட்டென்று வரையப்போகிறோம். இதோ, இப்படி:

*****************************
நிரல்பாகம் சாளரத்தில் ( அ )
    பதிப்பி "Window = ", அ
முடி

நிரல்பாகம் PD()
    பதிப்பி "Pen Down"
முடி

நிரல்பாகம் PU()
    பதிப்பி "Pen Up"
முடி

நிரல்பாகம் FD(அ)
    பதிப்பி "Forward ",அ
முடி

நிரல்பாகம் RT(அ)
    பதிப்பி "Right ", x
முடி

நிரல்பாகம் LT(அ)
    பதிப்பி "Left ",x
முடி

நிரல்பாகம் BK(அ)
    பதிப்பி "Back ",அ
முடி

நிரல்பாகம்  வேம்பு (அளவு, பதிவு)
   @( அளவு < 1 )  ஆனால்
        பின்கொடு 0
   முடி
   
   FD(அளவு)
   RT (70)
   வேம்பு (அளவு * 0.5 ,  -1 * பதிவு )
   LT(70*பதிவு)

   FD(அளவு)
   LT (70)
   வேம்பு (அளவு * 0.5,  1 *பதிவு )
   RT(70*பதிவு)
   
   RT (7*பதிவு)
   வேம்பு ( அளவு - 1, பதிவு )
   LT(7*பதிவு)
   BK(அளவு * 2)
முடி

சாளரத்தில் ( "clearscreen" )
PU()
PD()
சா = 5
BK (150*சா )

வேம்பு (25 , 1)
*****************************

நாம் இதுவரை எழுதியதிலேயே மிகப் பெரிய நிரல் இதுதான். மேலோட்டமாகப் பார்ப்பதற்குக் கொஞ்சம் சிக்கலாக இருக்கும். ஆனால் உண்மையில், வேம்பு() என்ற நிரல்பாகத்தைக் கொண்டு நாம் எழுதுகோலை முன்னும் பின்னும் வலமும் இடமும் நகர்த்துகிறோம், ஓர் இலையை வரைகிறோம், பின் அடுத்த இலையை வரைகிறோம், இந்த விஷயத்தை மனத்தில் கொண்டு வாசித்தால், நிரல் தெளிவாகப் புரியும்.

இந்த அத்தியாயத்தில் நாம் பார்த்தவை சில எளிய உதாரணங்கள்மட்டுமே, உண்மையில் நிரல்பாகத்தின் பயன் மிக மிகப் பெரியது, அதன்மூலம் அற்புதமான பல கணக்குகளை நொடியில் செய்துமுடிக்கலாம், வகைவகையான படங்களை வரையலாம், உங்கள் கற்பனைமட்டுமே எல்லை!

8

இந்தச் சிறு கையேட்டில், “எழில்" நிரல் மொழியைக் கொண்டு ஏராளமான விஷயங்களைச் செய்யத் தெரிந்துகொண்டோம். அடுத்து என்ன?

Files எனப்படும் கோப்புகளை நிரல்வழியே கையாள்வதன்மூலம் நாம் மேலும் பல பயனுள்ள நிரல்களை எழுதமுடியும். அவை வெறுமனே கற்கும் நோக்கத்துக்காகமட்டுமில்லாமல், பலருக்கும் உபயோகப்படும்.

உதாரணமாக, "எழில்"மூலமாக, உங்களுடைய கணினியில் ஒரு சிறு கோப்பை உருவாக்கி, அதில் சில விஷயங்களை எழுதிப் பார்ப்போம்

முதலில் புதிய கோப்பு ஒன்றை உருவாக்குவதற்கு, நாம் “கோப்பை_திற" என்கிற சொல்லைப் பயன்படுத்தவேண்டும். இதோ இப்படி:

*****************************
புதுக்கோப்பு = கோப்பை_திற("weekdays.txt", "w")
*****************************

இங்கே weekdays.txt என்பது கோப்பின் பெயர், “w" என்பது நாம் அதில் ஏதோ சில விஷயங்களை எழுத(write)ப்போகிறோம் என்பதைக் குறிக்கும் சொல்.

இப்படி நாம் உருவாக்கிய புதிய கோப்பை, “புதுக்கோப்பு" என்ற பெயரில் சேமித்துவைக்கிறோம். பின்னர் இந்தப் பெயரைப் பயன்படுத்திப் பல விஷயங்களைச் செய்யலாம். உதாரணமாக:

*****************************
அ = "திங்கள்"
ஆ = "செவ்வாய்"
இ = "புதன்"
ஈ = "வியாழன்"
உ = "வெள்ளி"

கோப்பை_எழுது(புதுக்கோப்பு, அ)
கோப்பை_எழுது(புதுக்கோப்பு, ஆ)
கோப்பை_எழுது(புதுக்கோப்பு, இ)
கோப்பை_எழுது(புதுக்கோப்பு, ஈ)
கோப்பை_எழுது(புதுக்கோப்பு, உ)
*****************************

நிறைவாக, அந்தக் கோப்பை மூடவேண்டும். அதற்குப் பயன்படுத்தவேண்டிய நிரல் வரி:

*****************************
கோப்பை_மூடு(புதுக்கோப்பு)
*****************************

அடுத்தபடியாக, நாம் எழுதிய இந்தக் கோப்பில் என்ன இருக்கிறது என்று படிக்க விரும்புகிறோம். அதற்கு இந்தக் கட்டளைகளைப் பயன்படுத்தலாம்:

*****************************
பழையகோப்பு = கோப்பை_திற("weekdays.txt")
வரிகள் = கோப்பை_படி(பழையகோப்பு)
பதிப்பி வரிகள்
கோப்பை_மூடு(பழையகோப்பு)
*****************************

கவனியுங்கள், இந்தமுறை கோப்பை_திற என்ற கட்டளையில் "w" என்று குறிப்பிடவில்லை, காரணம், நாம் இந்தக் கோப்பில் எதுவும் புதிதாக எழுதப்போவதில்லை, வெறுமனே படிக்கப்போகிறோம், அவ்வளவுதான்.

இப்போது உங்களுக்கு ஒரு பயிற்சி, இதுவரை நீங்கள் கற்றுக்கொண்ட விஷயங்களை வைத்து கீழே தரப்பட்டுள்ள தேவைகளுக்கேற்ப ஒரு நிரல் எழுதுங்கள்:

	* பூஜ்ஜியம் முதல் ஐநூறு வரை உள்ள Fibonacci எண்களைக் கண்டுபிடிக்கவேண்டும்
	* அவை ஒவ்வொன்றின் வர்க்கங்களை(Square)மட்டும் ஒரு கோப்பில் எழுதவேண்டும்
	* பின்னர் அவற்றைத் திரையில் அச்சிடவேண்டும்

விடை:

*****************************
எண்1 = 0
எண்2 = 1
எல்லை = 500

புதுக்கோப்பு = கோப்பை_திற("fibonacci.txt", "w")
கோப்பை_எழுது(புதுக்கோப்பு, எண்1 * எண்1)
கோப்பை_எழுது(புதுக்கோப்பு, எண்2 * எண்2)

எண்3 = எண்1 + எண்2

@(எண்3 <= எல்லை) வரை
	
	கோப்பை_எழுது(புதுக்கோப்பு, எண்3 * எண்3)

	எண்1 = எண்2
	எண்2 = எண்3
	எண்3 = எண்1 + எண்2

முடி

கோப்பை_மூடு(புதுக்கோப்பு)

# அச்சிடுதல்
பழையகோப்பு = கோப்பை_திற("fibonacci.txt")
வரிகள் = கோப்பை_படி(பழையகோப்பு)
பதிப்பி வரிகள்
கோப்பை_மூடு(பழையகோப்பு)
*****************************

"எழில்" மொழியில் அருமையான பல பயன்பாடுகள் உண்டு என்பதை விளக்கமாகப் பார்த்துள்ளோம், இதில் நீங்கள் அடிப்படை நிரல்களை எழுதப் பழகியபிறகு, அடுத்தகட்டமாக பைதான்(Python)போன்ற "எழில்"க்கு இணையான, அதேபோன்ற வடிவமைப்பைக் கொண்ட இன்னொரு விரிவான மொழியைக் கற்கலாம்.

அப்போது, நீங்கள் ஒரு முக்கியமான விஷயத்தை உணர்வீர்கள், "எழில்" மற்றும் “பைதான்" இடையே எழுதும் விதம் (Syntax) மாறுகிறதேதவிர, இவ்விரு மொழிகளிலும் நிரல் எழுதுவதற்கான அடிப்படைச் சிந்தனை (Logical Thought Process) ஒன்றுதான்.

இந்த இரு மொழிகளில்மட்டுமல்ல, உலகில் உள்ள அனைத்துக் கணினி நிரல் மொழிகளிலும், எழுதும் விதம்தான் மாறுபடும். சிந்திக்கத் தெரிந்தவர்கள் அதைக் கற்றுக்கொண்டு நிபுணராவது மிக எளிது. பின்னர் புதுப்புது மொழிகள் அறிமுகமானாலும் நாம் சுலபமாக அவற்றைத் தெரிந்துகொண்டு வெற்றி பெறலாம்.

ஆகவே, எந்த மொழியைக் கற்கிறோம் என்பதுபற்றி அதிகம் கவலைப்படவேண்டாம், நிரல் எழுத்தாளராகச் சிந்திக்கக் கற்றுக்கொண்டால் போதும், அதுவே உங்களைப் பல திசைகளுக்குக் கொண்டுசெல்லும்!

“எழில்" மொழியில் தொடங்கிய உங்கள் பயணம், எல்லாப் பக்கங்களிலும் விரியட்டும், உங்களுக்கு வாழ்த்துகள்!